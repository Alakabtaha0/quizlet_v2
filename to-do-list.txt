// DONE SECTION
// CREATE API
// -- CRUD 
// -- CREATE - Done
// -- READ - Done
// -- UPDATE - Done for one
// -- DELETE - Done
// CREATE MONGODB AND CONNECT - Done
// API - security and additonal features
// Control what gets sent back - Done
// Add validators to ensure data sent to DB is in correct format. - DONE
// Cookies - log users in using cookies -- DONE
// PROTECT ROUTES using users and admins -- DONE
// PROTECT FROM HACKERS -- DONE
// Make sure DB 'correct' field works DONE
// Add author to user DONE
// Need to complete the other front end routes DONE
// Use cookies -- DONE
// Create cookies upon sign up and reconfigure the verification method - DONE
// Create sign up page - DONE
// Show data to all normalized data in results controller - DONE
// Add emailing - DONE
// -- Log in page - DONE
// authController.protect working. different pages are good
// What should the authController.Protect actually Protect - DONE
// If someones not logged in - DONE
// If someones session expired - DONE
// Create middlewares - DONE
// Restrict users (Protect the routes) - DONE
// If someone's logged in, he can't access log in or sign up page - DONE
// make cookie decoder a middle ware and make user info accessible to controllers -- DONE
// CREATE FRONT END TO DISPLAY WORK -- DONE
/////// DEPLOYMENT ///////
Deploy mongoDB cluster using atlas -- DONE
 -- Connect the backend server to mongoDB using new config -- DONE
Make server display static react app -- DONE
Deploy Server to google app engine -- DONE
CI/CD github actions -- DONE
 - Now we just need to upload the frontend-admin to github
 - Create the .yaml file to build the front end first then, 
 replace the file in the back end, then deploy - DONE
Deploy front end using github actions - DONE
NOW WE NEED TO CREATE A VERIFICATION CODE
AFTER WE CREATE A VERIFICATION CODE, SEND IT TO THE EMAIL
ENTER THE CODE IN THE FIELD PROVIDED
IF IT'S THE CORRECT CODE CONTINUE OTHERWISE DON'T
// REFACTOR CODE SO THAT IT TAKES YOU BACK TO LOG IN IF THE RES IS A 404 -- DONE
// Connect front end to back end -- DONE
// SORT OUT CONFIG.ENV and allow access to the config file -- DONE
// / path doesn't work when deploying -- DONE
// WHITE SCREEN OF DEATH -- DONE 
// Make mobile optimized -- DONE (KINDA)
// Create sign out button -- DONE
// Delete account button -- DONE
// Validate password on front end (Confirm Password) -- DONE
// Display users name and other details -- Done
// Hash and salt passwords -- DONE
// Images and Audio stored on google cloud -- DONE
******************************************************
******************************************************
******************************************************
******************************************************
/// WHAT NEEDS TO BE DONE
// Add email validation to see if user is already signed up or if email even works
// Data santization
// Allow user to reset password
// Add filtering to quizController (content type, number of questions - filter bar for later)
// Some sorting implemented, come back and make it better


// BUGS *******
// If someones account gets deleted it just constantly makes request
// If you switch around the name and email it just breaks the database
// If someone deletes their account it doesn't go to the login page
// When someone signs up with a new account the menu doesn't show up -- SORTED

// for the pages make a:
// -- Update details page
// Make seperate pages for admin and users
// When you upload data there needs to be an answered section to store all of the answers

// SIDE QUESTS
// create seperate files Handling errors and different RES. make code more succinct

// Create admin front end
// fully control quizes - create questions, create quizzes, list all users in another section
// start off basic, get it working then add features



// WHAT TO DO NOW -- EVERYTHING ELSE CAN BE ADDED LATER 
// CREATE THE APP FRONT END
// USING REACT NATIVE
